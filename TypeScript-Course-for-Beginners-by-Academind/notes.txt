TypeScript is a JavaScript superset. TypeScript can't be executed by the environments that execute JS. It's compiled into JS. It gives us extra error checking.
In JS you can add 'if' checks, you can validate and sanitize user inputs, but it can be quite cumbersome and developers can still write invalid code.

17:28
tsc <filename.ts> will compile the TS file into JS file and throw errors if it encounters any.

20:15
TypeScript add types, allows to use IDE's automatic error recognition even before compiling. We can also use next-gen JS features (compiled down for older browsers). We also get non-JS features like Interfaces or Generics. It also gives us meta-programming features like Decorations. It has rich configuration options. It also has modern tooling that helps even in non-TS projects.

41:18 & 1:08:08
Core Syntax & Features
number 
   1, 5.3, -10 
   All numbers, no differentiation between integers or floats.
string 
   'Hi', "Hi", `Hi` 
   All text values
boolean 
   true / false
   Just these two, no 'truthy' or 'falsy' values.
object
   {age: 30}
   Any JavaScript object, more specific types (type of object) are possible
Array
   [1, 2, 3]
   Any JavaScript array, type can be flexible or strict (regarding the element types)
Tuple
   [1, 2]
   Added by TypeScript: fixed-length array.
Enum
   enum { NEW, OLD }
   Added by TypeScript: Automatically enumerated global constant identifiers
Any 
   *
   Any kind of value, no specific type assignment
Union types
   number | string
   Multiple possible types for one variable.
Literal types
   2.8, "word"
Function type
   () => number
Unknown
   Unknown is more restrictive than any. It doesn't disable the type checking.
Never 
   Function type that is used whaen a function doesn't even return an "undefined" value. For example, when we throw an error or when we have an infinite loop inside of the function.

50:30
TypeScript's type system only helps you during development (i.e before the code gets compiled)

56:04
the key difference between TS and JS is that JavaScript uses "dynamic types" (resolved at runtime), TypeScript uses "static types" (set during development)

1:05:30
If we wrote something like this:
   const number1 = 5;
then we don't have to specify the the type number1:number, because it's redundant, because const won't change anyway. TS will automatically infer the type.
But it does make sense to write it like this:
   let number1: number;
   <... some code...>
   number1 = 5;

1:12:00
const person: object = {
  name: "Sophie",
  age: 26,
};

We can't set type :object, because type "object" does not have any properties. So we need to be more specific, or TS will throw an error.

With objects it's best to just let TS infer the type of object based on its initial value.

1:25:10
A tuple is an array of fixed length and with each element set to a specific type. We can push into a tuple, though.

1:31:30
enum is a custom type. It is usually written with a capital letter. Basically enum allows to create a fixed set of elements that are connected to any other value (usually a number). So in this enum:
   enum Role {
   ADMIN,
   READ_ONLY,
   AUTHOR,
   }
   ADMIN = 0
   READ_ONLY = 1
   AUTHOR = 2

Or you can set the value manually and TS will start counting from you value:
   enum Role {
   ADMIN = 5,
   READ_ONLY,
   AUTHOR,
   }
   ADMIN = 5
   READ_ONLY = 6
   AUTHOR = 7
You can assign values to all of the identifiers, too.

1:52:37
We can store a union type in a custom type like this:
   type Combinable = number | string;
It's called type aliases.

1:55:55
We can set the type of return value from a function like this:
   function add(n1: number, n2: number): number {
      return n1 + n2;
   }
But quite often it's not necessary: TS can infer the type by itself.
TypeScript haas a special type :void. It's used to show that a function doesn't return any value.
We should use "void" when we don't have a return statement. And we can use both "void" and "undefined" if we have an empty return statement.

2:05:10
Function type can be set like this:
   let combineValues: (a: number, b: number) => number;
Which means that combineValues will any function that takes two parameters, both of which are numbers and it returns a number.
Parameters' names don't have to match the parameters names from the function that we're going to assign to combineValues.

2:10:12
If we set function return type to void we can still return something from the function. But the code will ignore it

2:23:05
To watch and autocompile whenever a change occurs in a file, we can use "tsc app.ts --watch" or "tsc app.ts -w" command in the terminal.

2:25:30
"tsc --init" will initialize the project so TS will know that it need to compile all of the ts files.
Running "tsc -w" after that will watch all of the files in the project.

2:29:40
In tsconfig.json file we can specify any files and folders that we don't want to compile.
Alternatively, we can set the files that we do want to compile, while ignoring everything else:
{
  "compilerOptions": {
    *some options*
  },
  "exclude": [
      "Part_1/",
      "**/*.dev.ts",
      "node_modules" // would be the default anyway
   ],

   // OR

   "include": [
      "app.ts"
   ]
}

All the files in "exclude" are ignored, so basically we compile all "include" files minus all the "exclude" files.
We can also set 
   "files": []
With "files" you can't specify folder, only single files. That can be convenient for small projects.

2:37:00
tsconfig.json file options:
"target": "es2016" - set the version of JS that TS is going ot be transpiled to.
"lib": [], - allows you to specify which default objects and features TS knows (like working with the DOM). 
For example, you wouldn't want to use something like "document.querySelector" in code, if you're writing something in node.js.
If we don't use "lib", then TS will use everything included in the chosen version of JS by default. 
By default it's like this:
   "lib": [
      "DOM",
      "ES6",
      "DOM.Iterable",
      "ScriptHost"
    ]
Otherwise we have to uncomment it and specify exactly what we want to be included.

"allowJs": true, - this will make TS compile JS files, too.
"checkJs": true, - this will check JS for any potential errors and wil throw errors.
"allowJs" and "checkJs" can be used in projects where you don't want ot use TS but still want to use some of its features.

"sourceMap": true - allows us to see both compiled .js files and initial .ts files in DevTools in the Sources tab. It'll also create .js.map files in the project (they're needed to link initial and final files)

"outDir": "./dist" - here we can specify the directory where all of the output files will be created. This also preserves the folder structure (so TS will create the same folders in dist/ as in src/)

"rootDir": "./src" - works a bit like the "include" option. But the point is that it ignores all the files outside of this root directory and won't look at the structure af the files outside of this root directory.

"removeComments": true, - removes all the comments in the output file.

"noEmit": true, - will not create any JS files. Can be used when you're only using TS to check your code, but not to actually compile it.

"downlevelIteration": true, - sometimes TS can compile FOR loops with errors. This option will fix that, but it's best to use this option only when needed, because the code it creates might be less performant. 

"noEmitOnError": true, - stops TS from creating a JS file if there's an error.

"strict": true - basically enables all of these:
   "noImplicitAny": true, - it ensures that we have to be clear about the values we're working with. We have to set the type for parameters in functions. We don't have to specify the type of variables if TS can infer the type;
   "strictNullChecks": true, - it tells TS to be how to work with values that might potentially hold a null value.
   "strictFunctionTypes": true, 
   "strictBindCallApply": true, - checks that the arguments for 'bind', 'call', and 'apply' methods match the original function
   "strictPropertyInitialization": true, 
   "noImplicitThis": true,
   "alwaysStrict": true - JS files use strict mode.

To avoid strict null check, we can use an "!" like this: document.querySelector("button")!
The "!" will tel TS that the button definitely exist and that it should complain about possible null value here.

"noUnusedLocals": true, - throws an error if declare a local variable and don't use it. It ignores global variables, though.
"noUnusedParameters": true, - throws an error if declare a parameter in a function that's not used.
"noImplicitReturns": true, - throws an error if TS sees that function will possibly not have an explicit return. Basically if your function ever returns something, you have to make sure it always return something. 
"exactOptionalPropertyTypes": true,